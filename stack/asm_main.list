     1                                  %include "asm_io.inc"
     2                              <1> 	extern  read_int, print_int, print_string
     3                              <1> 	extern	read_char, print_char, print_nl
     4                              <1> 	extern  sub_dump_regs, sub_dump_mem, sub_dump_math, sub_dump_stack
     5                              <1> 
     6                              <1> %macro 	dump_regs 1
     7                              <1> 	push	  dword %1
     8                              <1> 	call	  sub_dump_regs
     9                              <1> %endmacro
    10                              <1> 
    11                              <1> 
    12                              <1> ;
    13                              <1> ; usage: dump_mem label, start-address, # paragraphs
    14                              <1> %macro  dump_mem 3
    15                              <1> 	push	 dword %1
    16                              <1> 	push	 dword %2
    17                              <1> 	push	 dword %3
    18                              <1> 	call	 sub_dump_mem
    19                              <1> %endmacro
    20                              <1> 
    21                              <1> %macro	dump_math 1
    22                              <1> 	push	 dword %1
    23                              <1> 	call	 sub_dump_math
    24                              <1> %endmacro
    25                              <1> 
    26                              <1> %macro  dump_stack 3
    27                              <1> 	push	 dword %3
    28                              <1>         push     dword %2
    29                              <1> 	push	 dword %1
    30                              <1>         call     sub_dump_stack
    31                              <1> %endmacro
    32                                  
    33                                  segment .data
    34 00000000 01000000                var1    dd  1
    35                                  
    36                                  segment .bss
    37                                  
    38                                  
    39                                  segment .text
    40                                          global  asm_main
    41                                  asm_main:
    42 00000000 C8000000                        enter   0,0               ; setup routine
    43 00000004 60                              pusha
    44                                  
    45 00000005 B861000000                      mov     eax,'a' ; (gdb) x/c $esp+28 0xffffd9d4:     97 'a'
    46 0000000A BB62000000                      mov     ebx,'b' ; (gdb) x/c $esp+16 0xffffd9c8:     98 'b'
    47 0000000F B963000000                      mov     ecx,'c' ; (gdb) x/c $esp+24 0xffffd9d0:     99 'c'
    48 00000014 BA64000000                      mov     edx,'d' ; (gdb) x/c $esp+20 0xffffd9cc:     100 'd'
    49                                  b1:
    50 00000019 60                              pusha
    51 0000001A B858000000                      mov     eax,'X'
    52 0000001F 8944241C                        mov     [esp+28],eax
    53                                  b2:
    54 00000023 61                              popa
    55 00000024 FF35[00000000]                  push dword [var1]       ; 1 stored 
    56 0000002A 6A02                            push dword 2            ; 2 stored 
    57 0000002C 6A03                            push dword 3            ; 3 stored 
    58 0000002E 58                              pop eax ; EAX = 3, ESP = 
    59 0000002F 5B                              pop ebx ; EBX = 2, ESP = 
    60 00000030 59                              pop ecx ; ECX = 1, ESP = 
    61                                  
    62 00000031 6A01                            push dword 1
    63 00000033 83C404                          add  esp, 4          ; Pop null
    64                                  
    65 00000036 E8(00000000)                    call print_int
    66 0000003B E8(00000000)                    call print_nl
    67                                  
    68 00000040 61                              popa
    69 00000041 B800000000                      mov     eax, 0            ; return back to C
    70 00000046 C9                              leave                     
    71 00000047 C3                              ret
    72                                  
    73                                  
