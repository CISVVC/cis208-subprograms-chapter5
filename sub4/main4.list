     1                                  ;
     2                                  ; file: main4.asm
     3                                  ; Multi-module subprogram example program
     4                                  ;
     5                                  
     6                                  %include "asm_io.inc"
     7                              <1> 	extern  read_int, print_int, print_string
     8                              <1> 	extern	read_char, print_char, print_nl
     9                              <1> 	extern  sub_dump_regs, sub_dump_mem, sub_dump_math, sub_dump_stack
    10                              <1> 
    11                              <1> %macro 	dump_regs 1
    12                              <1> 	push	  dword %1
    13                              <1> 	call	  sub_dump_regs
    14                              <1> %endmacro
    15                              <1> 
    16                              <1> 
    17                              <1> ;
    18                              <1> ; usage: dump_mem label, start-address, # paragraphs
    19                              <1> %macro  dump_mem 3
    20                              <1> 	push	 dword %1
    21                              <1> 	push	 dword %2
    22                              <1> 	push	 dword %3
    23                              <1> 	call	 sub_dump_mem
    24                              <1> %endmacro
    25                              <1> 
    26                              <1> %macro	dump_math 1
    27                              <1> 	push	 dword %1
    28                              <1> 	call	 sub_dump_math
    29                              <1> %endmacro
    30                              <1> 
    31                              <1> %macro  dump_stack 3
    32                              <1> 	push	 dword %3
    33                              <1>         push     dword %2
    34                              <1> 	push	 dword %1
    35                              <1>         call     sub_dump_stack
    36                              <1> %endmacro
    37                                  
    38                                  segment .data
    39 00000000 00000000                sum     dd   0
    40                                  
    41                                  segment .bss
    42 00000000 <res 00000004>          input   resd 1
    43                                  
    44                                   
    45                                  
    46                                  ;
    47                                  ; psuedo-code algorithm
    48                                  ; i = 1;
    49                                  ; sum = 0;
    50                                  ; while( get_int(i, &input), input != 0 ) {
    51                                  ;   sum += input;
    52                                  ;   i++;
    53                                  ; }
    54                                  ; print_sum(num);
    55                                  
    56                                  segment .text
    57                                          global  asm_main
    58                                          extern  get_int, print_sum
    59                                  asm_main:
    60 00000000 C8000000                        enter   0,0               ; setup routine
    61 00000004 60                              pusha
    62                                  
    63 00000005 BA01000000                      mov     edx, 1            ; edx is 'i' in pseudo-code
    64                                  while_loop:
    65 0000000A 52                              push    edx               ; save i on stack
    66 0000000B 68[00000000]                    push    dword input       ; push address on input on stack
    67 00000010 E8(00000000)                    call    get_int
    68 00000015 83C408                          add     esp, 8            ; remove i and &input from stack
    69                                  
    70 00000018 A1[00000000]                    mov     eax, [input]
    71 0000001D 83F800                          cmp     eax, 0
    72 00000020 7409                            je      end_while
    73                                  
    74 00000022 0105[00000000]                  add     [sum], eax        ; sum += input
    75                                  
    76 00000028 42                              inc     edx
    77 00000029 EBDF                            jmp     short while_loop
    78                                  
    79                                  end_while:
    80 0000002B FF35[00000000]                  push    dword [sum]       ; push value of sum onto stack
    81 00000031 E8(00000000)                    call    print_sum
    82 00000036 59                              pop     ecx               ; remove [sum] from stack
    83                                  
    84 00000037 61                              popa
    85 00000038 C9                              leave                     
    86 00000039 C3                              ret
    87                                  
    88                                  
    89                                  
    90                                  
