     1                                  
     2                                  
     3                                  ;
     4                                  ; file: sub2.asm
     5                                  ; Subprogram example program
     6                                  ;
     7                                  ; To create executable:
     8                                  ; Using djgpp:
     9                                  ; nasm -f coff sub2.asm
    10                                  ; gcc -o sub1 sub2.o driver.c asm_io.o
    11                                  ;
    12                                  ; Using Borland C/C++
    13                                  ; nasm -f obj sub2.asm
    14                                  ; bcc32 sub2.obj driver.c asm_io.obj
    15                                  
    16                                  %include "asm_io.inc"
    17                              <1> 	extern  read_int, print_int, print_string
    18                              <1> 	extern	read_char, print_char, print_nl
    19                              <1> 	extern  sub_dump_regs, sub_dump_mem, sub_dump_math, sub_dump_stack
    20                              <1> 
    21                              <1> %macro 	dump_regs 1
    22                              <1> 	push	  dword %1
    23                              <1> 	call	  sub_dump_regs
    24                              <1> %endmacro
    25                              <1> 
    26                              <1> 
    27                              <1> ;
    28                              <1> ; usage: dump_mem label, start-address, # paragraphs
    29                              <1> %macro  dump_mem 3
    30                              <1> 	push	 dword %1
    31                              <1> 	push	 dword %2
    32                              <1> 	push	 dword %3
    33                              <1> 	call	 sub_dump_mem
    34                              <1> %endmacro
    35                              <1> 
    36                              <1> %macro	dump_math 1
    37                              <1> 	push	 dword %1
    38                              <1> 	call	 sub_dump_math
    39                              <1> %endmacro
    40                              <1> 
    41                              <1> %macro  dump_stack 3
    42                              <1> 	push	 dword %3
    43                              <1>         push     dword %2
    44                              <1> 	push	 dword %1
    45                              <1>         call     sub_dump_stack
    46                              <1> %endmacro
    47                                  
    48                                  segment .data
    49 00000000 456E7465722061206E-     prompt1 db    "Enter a number: ", 0       ; don't forget nul terminator
    50 00000009 756D6265723A2000   
    51 00000011 456E74657220616E6F-     prompt2 db    "Enter another number: ", 0
    52 0000001A 74686572206E756D62-
    53 00000023 65723A2000         
    54 00000028 596F7520656E746572-     outmsg1 db    "You entered ", 0
    55 00000031 65642000           
    56 00000035 20616E642000            outmsg2 db    " and ", 0
    57 0000003B 2C207468652073756D-     outmsg3 db    ", the sum of these is ", 0
    58 00000044 206F66207468657365-
    59 0000004D 2069732000         
    60                                  
    61                                  segment .bss
    62                                  ;
    63                                  ; These labels refer to double words used to store the inputs
    64                                  ;
    65 00000000 <res 00000004>          input1  resd 1
    66 00000004 <res 00000004>          input2  resd 1
    67                                  
    68                                   
    69                                  
    70                                  segment .text
    71                                          global  asm_main
    72                                  asm_main:
    73 00000000 C8000000                        enter   0,0               ; setup routine
    74 00000004 60                              pusha
    75                                  
    76 00000005 B8[00000000]                    mov     eax, prompt1      ; print out prompt
    77 0000000A E8(00000000)                    call    print_string
    78                                  
    79 0000000F BB[00000000]                    mov     ebx, input1       ; store address of input1 into ebx
    80 00000014 E867000000                      call    get_int           ; read integer
    81                                  
    82 00000019 B8[11000000]                    mov     eax, prompt2      ; print out prompt
    83 0000001E E8(00000000)                    call    print_string
    84                                  
    85 00000023 BB[04000000]                    mov     ebx, input2
    86 00000028 E853000000                      call    get_int
    87                                  
    88 0000002D A1[00000000]                    mov     eax, [input1]     ; eax = dword at input1
    89 00000032 0305[04000000]                  add     eax, [input2]     ; eax += dword at input2
    90 00000038 89C3                            mov     ebx, eax          ; ebx = eax
    91                                  ;
    92                                  ; next print out result message as series of steps
    93                                  ;
    94                                  
    95 0000003A B8[28000000]                    mov     eax, outmsg1
    96 0000003F E8(00000000)                    call    print_string      ; print out first message
    97 00000044 A1[00000000]                    mov     eax, [input1]     
    98 00000049 E8(00000000)                    call    print_int         ; print out input1
    99 0000004E B8[35000000]                    mov     eax, outmsg2
   100 00000053 E8(00000000)                    call    print_string      ; print out second message
   101 00000058 A1[04000000]                    mov     eax, [input2]
   102 0000005D E8(00000000)                    call    print_int         ; print out input2
   103 00000062 B8[3B000000]                    mov     eax, outmsg3
   104 00000067 E8(00000000)                    call    print_string      ; print out third message
   105 0000006C 89D8                            mov     eax, ebx
   106 0000006E E8(00000000)                    call    print_int         ; print out sum (ebx)
   107 00000073 E8(00000000)                    call    print_nl          ; print new-line
   108                                  
   109 00000078 61                              popa
   110 00000079 B800000000                      mov     eax, 0            ; return back to C
   111 0000007E C9                              leave                     
   112 0000007F C3                              ret
   113                                  ;
   114                                  ; subprogram get_int
   115                                  ; Parameters:
   116                                  ;   ebx - address of word to store integer into
   117                                  ; Notes:
   118                                  ;   value of eax is destroyed
   119                                  get_int:
   120 00000080 E8(00000000)                    call    read_int
   121 00000085 8903                            mov     [ebx], eax         ; store input into memory
   122 00000087 C3                              ret                        ; jump back to caller
   123                                  
   124                                  
